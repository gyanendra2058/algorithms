https://www.codingame.com/playgrounds/5422/js-interview-prep-recursion

a. Should calculate the expoenent of a value
b. Given a multi-dimensional integer array, return the total number of integers stored inside this array
c. Write a function called sumRange. It will take a number and return the sum of all numbers from 1 up to the number passed in.
Sample: sumRange(3) returns 6, since 1 + 2 + 3 = 6.

d. Check all values in an array
Write a function called all which accepts an array and a callback and returns true if every value in the array returns true when passed as parameter to the callback function
Sample: var allAreLessThanSeven = all([1,2,9], function(num){
	return num < 7;
})();

console.log(allAreLessThanSeven); // false


e. Write a function that sums squares of numbers in list that may contain more lists
var l = [1,2,3]; 
console.log(SumSquares(l)); // 1 + 4 + 9 = 14

l = [[1,2],3]; 
console.log(SumSquares(l)); // 1 + 4 + 9 = 14

l = [[[[[[[[[1]]]]]]]]] 
console.log(SumSquares(l)); // 1 = 1

l = [10,[[10],10],[10]] 
console.log(SumSquares(l)); // 100 + 100 + 100 + 100 = 400

f. The function should return an array containing repetitions of the number argument. For instance, replicate(3, 5) should return [5,5,5]. If the times argument is negative, return an empty array.

console.log(replicate(3, 5)) // [5, 5, 5]
console.log(replicate(1, 69)) // [69]
console.log(replicate(-2, 6)) // []

g. Flatten a nested array.
  [1, [2, 3], 4, [5, 6, [7, 8], 9]] -> [1, 2, 3, 4, 5, 6, 7, 8, 9]

 



